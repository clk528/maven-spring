<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
       
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/views/" />
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="number_format">0.##########</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="template_exception_handler">ignore</prop>
            </props>
        </property>
    </bean>
    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>
        <property name="cache" value="true"></property>
        <!--这里需要注意一下，我注释了下面这样一行代码，这行代码的意思就是指引freemarker需要解析的文件的位置。注释掉原因是因为
        applicationContext.xml里有这样一行代码：<property name="templateLoaderPath" value="/WEB-INF/views/" /> 已经指定了视图位置。如果我们这里依然保留下方代码，页面会报406的找不到的错误 -->
        <!--<property name="prefix"><value>/WEB-INF/views/</value></property>-->
        <property name="suffix" value=".html"></property>
        <property name="contentType" value="text/html; charset=UTF-8"></property>
    </bean>
        
    <!-- 视图解析器 -->
    <!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".html"></property>
    </bean> -->
        
    <!-- 1.读取配置 -->
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
    <bean id="propertyConfigurer" class="com.clk.core.dict.Configurer">    
        <property name="location" value="classpath:config.properties"/>
    </bean>
    
    <!-- 2.创建jdbc数据源  -->
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${dbDriver}"/>
        <property name="url" value="${dbUrl}"/>
        <property name="username" value="${dbUser}"/>
        <property name="password" value="${dbPass}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="minIdle" value="${minIdle}"/>
    </bean> -->
    
    <!-- 3.配置SqlSessionFactory对象 -->
    <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
        <!-- 注入数据库连接池 -->
        <!-- <property name="dataSource" ref="dataSource" /> -->
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <!-- <property name="configLocation" value="classpath:mybatis-config.xml" /> -->
        <!-- 扫描entity包 使用别名 -->
        <!-- <property name="typeAliasesPackage" value="com.clk.entity.*" /> -->
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <!-- <property name="mapperLocations" value="classpath:Mapper/*.xml" />
    </bean> -->
    
    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
        <!-- 注入sqlSessionFactory -->
       <!--  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
        <!-- 给出需要扫描Dao接口包 -->
        <!-- <property name="basePackage" value="com.clk.dao.*" />
    </bean> -->
</beans>